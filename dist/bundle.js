(()=>{"use strict";var n={235:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".restaurant-filter-container {\n  display: none;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.filter--visible {\n  display: flex;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n","",{version:3,sources:["webpack://./src/components/Filter/index.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;;EAE9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,gBAAgB;;EAEhB,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd",sourcesContent:[".restaurant-filter-container {\n  display: none;\n  justify-content: space-between;\n\n  padding: 0 16px;\n  margin-top: 24px;\n}\n\n.filter--visible {\n  display: flex;\n}\n\n.restaurant-filter-container select {\n  height: 44px;\n  min-width: 125px;\n\n  border: 1px solid #d0d5dd;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 16px;\n}\n\n.restaurant-filter {\n  padding: 8px;\n}\n"],sourceRoot:""}]);const s=o},116:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n","",{version:3,sources:["webpack://./src/components/Header/index.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,YAAY;;EAEZ,eAAe;;EAEf,sCAAsC;AACxC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;;EAEZ,YAAY;EACZ,kBAAkB;EAClB,uBAAuB;;EAEvB,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,mBAAmB;AACrB",sourcesContent:[".gnb {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 64px;\n\n  padding: 0 16px;\n\n  background-color: var(--primary-color);\n}\n\n.gnb__title {\n  color: #fcfcfd;\n}\n\n.gnb__button {\n  height: 40px;\n\n  border: none;\n  border-radius: 8px;\n  background: transparent;\n\n  font-size: 24px;\n  cursor: pointer;\n}\n\n.gnb__button img {\n  display: block;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n}\n"],sourceRoot:""}]);const s=o},590:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'.modal-title {\n  margin-bottom: 36px;\n}\n\n#add-restaurant-form {\n  display: flex;\n  flex-direction: column;\n\n  height: 70vh;\n\n  gap: 10px;\n}\n\n.form-item-container {\n  overflow: scroll;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: "*";\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name="name"],\ninput[name="link"] {\n  height: 44px;\n}\n',"",{version:3,sources:["webpack://./src/components/Modal/AddRestaurantFormModal/index.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;;EAEtB,YAAY;;EAEZ,SAAS;AACX;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sBAAsB;;EAEtB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,iBAAiB;;EAEjB,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;;EAGE,YAAY;EACZ,aAAa;;EAEb,iCAAiC;EACjC,kBAAkB;;EAElB,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;;EAEZ,YAAY;;EAEZ,iCAAiC;EACjC,kBAAkB;;EAElB,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;AACd",sourcesContent:['.modal-title {\n  margin-bottom: 36px;\n}\n\n#add-restaurant-form {\n  display: flex;\n  flex-direction: column;\n\n  height: 70vh;\n\n  gap: 10px;\n}\n\n.form-item-container {\n  overflow: scroll;\n}\n\n.form-item {\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 36px;\n}\n\n.form-item label {\n  color: var(--grey-400);\n  font-size: 14px;\n}\n\n.form-item--required label::after {\n  padding-left: 4px;\n\n  color: var(--primary-color);\n  content: "*";\n}\n\n.form-item .help-text {\n  color: var(--grey-300);\n}\n\n.form-item input,\n.form-item textarea,\n.form-item select {\n  padding: 8px;\n  margin: 6px 0;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  font-size: 16px;\n}\n\n.form-item textarea {\n  resize: none;\n}\n\n.form-item select {\n  height: 44px;\n\n  padding: 8px;\n\n  border: 1px solid var(--grey-200);\n  border-radius: 8px;\n\n  color: var(--grey-300);\n}\n\ninput[name="name"],\ninput[name="link"] {\n  height: 44px;\n}\n'],sourceRoot:""}]);const s=o},68:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".restaurant-detail-container {\n  display: flex;\n  flex-direction: column;\n\n  gap: 16px;\n}\n\n.category-and-favorite {\n  display: flex;\n  justify-content: space-between;\n}\n\n.detail-subtitle {\n  font-size: 20px;\n}\n\n.detail-favorite {\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/components/Modal/RestaurantDetailModal/index.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB",sourcesContent:[".restaurant-detail-container {\n  display: flex;\n  flex-direction: column;\n\n  gap: 16px;\n}\n\n.category-and-favorite {\n  display: flex;\n  justify-content: space-between;\n}\n\n.detail-subtitle {\n  font-size: 20px;\n}\n\n.detail-favorite {\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const s=o},83:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: fixed;\n  bottom: 0;\n  max-height: 90%;\n  width: 100%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n}\n","",{version:3,sources:["webpack://./src/components/Modal/index.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;EAEP,+BAA+B;AACjC;;AAEA;EACE,eAAe;EACf,SAAS;EACT,eAAe;EACf,WAAW;;EAEX,kBAAkB;;EAElB,8BAA8B;EAC9B,2BAA2B;AAC7B",sourcesContent:[".modal {\n  display: none;\n}\n\n.modal--open {\n  display: block;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  background: rgba(0, 0, 0, 0.35);\n}\n\n.modal-container {\n  position: fixed;\n  bottom: 0;\n  max-height: 90%;\n  width: 100%;\n\n  padding: 32px 16px;\n\n  border-radius: 8px 8px 0px 0px;\n  background: var(--grey-100);\n}\n"],sourceRoot:""}]);const s=o},792:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n\n  cursor: pointer;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n.favorite {\n  margin-left: auto;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantList/RestaurantItem/index.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;;EAEvB,iBAAiB;;EAEjB,gCAAgC;;EAEhC,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;;EAEhB,kBAAkB;;EAElB,kBAAkB;EAClB,gCAAgC;AAClC;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;AAC7B;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,oBAAoB;;EAEpB,gBAAgB;;EAEhB,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;EACrB,4BAA4B;AAC9B;;AAEA;EACE,iBAAiB;AACnB",sourcesContent:[".restaurant {\n  display: flex;\n  align-items: flex-start;\n\n  padding: 16px 8px;\n\n  border-bottom: 1px solid #e9eaed;\n\n  cursor: pointer;\n}\n\n.restaurant__category {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n  min-width: 64px;\n  min-height: 64px;\n\n  margin-right: 16px;\n\n  border-radius: 50%;\n  background: var(--lighten-color);\n}\n\n.category-icon {\n  width: 36px;\n  height: 36px;\n}\n\n.restaurant__info {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n}\n\n.restaurant__name {\n  margin: 0;\n}\n\n.restaurant__distance {\n  color: var(--primary-color);\n}\n\n.restaurant__description {\n  display: -webkit-box;\n\n  padding-top: 8px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n.favorite {\n  margin-left: auto;\n}\n"],sourceRoot:""}]);const s=o},240:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n","",{version:3,sources:["webpack://./src/components/RestaurantList/index.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,eAAe;EACf,cAAc;AAChB",sourcesContent:[".restaurant-list-container {\n  display: flex;\n  flex-direction: column;\n\n  padding: 0 16px;\n  margin: 16px 0;\n}\n"],sourceRoot:""}]);const s=o},639:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'.restaurant-tab-container {\n  display: flex;\n\n  margin-top: 22px;\n  padding: 0 16px;\n\n  text-align: center;\n}\n\n.tab-item {\n  width: 50%;\n\n  padding: 9px 0;\n\n  border-bottom: 2px solid #d0d5dd;\n\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 24px;\n  color: #667085;\n}\n\ninput[type="radio"] {\n  display: none;\n}\n\ninput[type="radio"]:checked + .tab-item {\n  border-color: #ec4a0a;\n  color: #ec4a0a;\n}\n',"",{version:3,sources:["webpack://./src/components/Tab/index.css"],names:[],mappings:"AAAA;EACE,aAAa;;EAEb,gBAAgB;EAChB,eAAe;;EAEf,kBAAkB;AACpB;;AAEA;EACE,UAAU;;EAEV,cAAc;;EAEd,gCAAgC;;EAEhC,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB",sourcesContent:['.restaurant-tab-container {\n  display: flex;\n\n  margin-top: 22px;\n  padding: 0 16px;\n\n  text-align: center;\n}\n\n.tab-item {\n  width: 50%;\n\n  padding: 9px 0;\n\n  border-bottom: 2px solid #d0d5dd;\n\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 24px;\n  color: #667085;\n}\n\ninput[type="radio"] {\n  display: none;\n}\n\ninput[type="radio"]:checked + .tab-item {\n  border-color: #ec4a0a;\n  color: #ec4a0a;\n}\n'],sourceRoot:""}]);const s=o},767:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n/* Button *************************************/\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;EAEE,uBAAuB;EACvB,eAAe;AACjB;;AAEA,mDAAmD;AACnD;EACE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA,mDAAmD;AACnD;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA,+CAA+C;AAC/C;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;;EAEZ,kBAAkB;;EAElB,YAAY;EACZ,kBAAkB;;EAElB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,uBAAuB;;EAEvB,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;;EAEhC,sBAAsB;AACxB",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nul,\nli {\n  list-style: none;\n}\n\nhtml,\nbody {\n  font-family: sans-serif;\n  font-size: 16px;\n}\n\n/* Colors *****************************************/\n:root {\n  --primary-color: #ec4a0a;\n  --lighten-color: #f6a88a;\n  --grey-100: #ffffff;\n  --grey-200: #d0d5dd;\n  --grey-300: #667085;\n  --grey-400: #344054;\n  --grey-500: #000000;\n}\n\n/* Typography *************************************/\n.text-title {\n  font-size: 20px;\n  line-height: 24px;\n  font-weight: 600;\n}\n\n.text-subtitle {\n  font-size: 18px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.text-body {\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n}\n\n.text-caption {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n/* Button *************************************/\n.button-container {\n  display: flex;\n}\n\n.button {\n  width: 100%;\n  height: 44px;\n\n  margin-right: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.button:last-child {\n  margin-right: 0;\n}\n\n.button--secondary {\n  border: 1px solid var(--grey-300);\n  background: transparent;\n\n  color: var(--grey-300);\n}\n\n.button--primary {\n  background: var(--primary-color);\n\n  color: var(--grey-100);\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(o[A]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var A=n[s],l=r.base?A[0]+r.base:A[0],c=i[l]||0,d="".concat(l," ").concat(c);i[l]=c+1;var p=e(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var g=a(u,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:g,references:1})}o.push(d)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);t[s].references--}for(var A=r(n,a),l=0;l<i.length;l++){var c=e(i[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=A}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p;var n=e(379),t=e.n(n),r=e(795),a=e.n(r),i=e(569),o=e.n(i),s=e(565),A=e.n(s),l=e(216),c=e.n(l),d=e(589),p=e.n(d),u=e(767),g={};g.styleTagTransform=p(),g.setAttributes=A(),g.insert=o().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=c(),t()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;var f=e(235),E={};E.styleTagTransform=p(),E.setAttributes=A(),E.insert=o().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=c(),t()(f.Z,E),f.Z&&f.Z.locals&&f.Z.locals;const h={ALL:"전체",KOREAN:"한식",JAPANESE:"일식",CHINESE:"중식",ASIAN:"아시안",WESTERN:"양식",ETC:"기타"},m={NAME:"이름순",DISTANCE:"거리순"};var v=e(116),b={};b.styleTagTransform=p(),b.setAttributes=A(),b.insert=o().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=c(),t()(v.Z,b),v.Z&&v.Z.locals&&v.Z.locals;const x=n=>document.querySelector(n);var C=e(639),B={};B.styleTagTransform=p(),B.setAttributes=A(),B.insert=o().bind(null,"head"),B.domAPI=a(),B.insertStyleElement=c(),t()(C.Z,B),C.Z&&C.Z.locals&&C.Z.locals;var y=e(83),w={};w.styleTagTransform=p(),w.setAttributes=A(),w.insert=o().bind(null,"head"),w.domAPI=a(),w.insertStyleElement=c(),t()(y.Z,w),y.Z&&y.Z.locals&&y.Z.locals;var k=e(590),L={};L.styleTagTransform=p(),L.setAttributes=A(),L.insert=o().bind(null,"head"),L.domAPI=a(),L.insertStyleElement=c(),t()(k.Z,L),k.Z&&k.Z.locals&&k.Z.locals;const S=n=>n===h.KOREAN?"korean":n===h.JAPANESE?"japanese":n===h.CHINESE?"chinese":n===h.ASIAN?"asian":n===h.WESTERN?"western":"etc";var $=e(68),T={};T.styleTagTransform=p(),T.setAttributes=A(),T.insert=o().bind(null,"head"),T.domAPI=a(),T.insertStyleElement=c(),t()($.Z,T),$.Z&&$.Z.locals&&$.Z.locals;var _=e(240),Z={};Z.styleTagTransform=p(),Z.setAttributes=A(),Z.insert=o().bind(null,"head"),Z.domAPI=a(),Z.insertStyleElement=c(),t()(_.Z,Z),_.Z&&_.Z.locals&&_.Z.locals;var j,I,M,R,O=function(n,t,e,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?n!==t||!a:!t.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(n,e):a?a.value=e:t.set(n,e),e},Y=function(n,t,e,r){if("a"===e&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?n!==t||!r:!t.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?r:"a"===e?r.call(n):r?r.value:t.get(n)};class q{constructor(n){j.add(this),I.set(this,void 0),O(this,I,n,"f")}addRestaurant(n){Y(this,I,"f").push(n)}removeRestaurant(n){O(this,I,Y(this,I,"f").filter((t=>t.id!==n)),"f")}getRestaurantList(n="전체",t="이름순"){const e=Y(this,j,"m",M).call(this,n,Y(this,I,"f"));return Y(this,j,"m",R).call(this,t,e)}getFavoriteList(){return Y(this,I,"f").filter((n=>!0===n.favorite))}toggleFavoriteState(n){O(this,I,Y(this,I,"f").map((t=>t.id!==n?t:{...t,favorite:!t.favorite})),"f")}}I=new WeakMap,j=new WeakSet,M=function(n,t){return n===h.ALL?t:t.filter((t=>t.category===n))},R=function(n,t){return n===m.NAME?[...t].sort(((n,t)=>n.name>t.name?1:-1)):n===m.DISTANCE?[...t].sort(((n,t)=>n.distance-t.distance)):t};const F={setData(n,t){localStorage.setItem(n,JSON.stringify(t))},getData(n){const t=localStorage.getItem(n);return t?JSON.parse(t):[]}};var z=e(792),D={};D.styleTagTransform=p(),D.setAttributes=A(),D.insert=o().bind(null,"head"),D.domAPI=a(),D.insertStyleElement=c(),t()(z.Z,D),z.Z&&z.Z.locals&&z.Z.locals;const N=new class{constructor(n){this.$target=n,this.render()}template(){return'\n    <div class="modal-backdrop"></div>\n    <div class="modal-container"></div>\n        '}render(){this.$target.insertAdjacentHTML("beforeend",this.template())}toggle(){this.$target.classList.toggle("modal--open")}renderAddRestaurantForm(n){const t=this.$target.querySelector(".modal-container");new class{constructor(n,t){this.$target=n,this.restaurantList=t,this.render()}template(){return'\n    <h2 class="modal-title text-title">새로운 음식점</h2>\n    <form id="add-restaurant-form">\n      <div class="form-item-container">\n        \x3c!-- 카테고리 --\x3e\n        <div class="form-item form-item--required">\n          <label for="category text-caption">카테고리</label>\n          <select name="category" id="category" required>\n            <option value="">선택해 주세요</option>\n            <option value="한식">한식</option>\n            <option value="중식">중식</option>\n            <option value="일식">일식</option>\n            <option value="양식">양식</option>\n            <option value="아시안">아시안</option>\n            <option value="기타">기타</option>\n          </select>\n        </div>\n\n        \x3c!-- 음식점 이름 --\x3e\n        <div class="form-item form-item--required">\n          <label for="name text-caption">이름</label>\n          <input type="text" name="name" id="name" required />\n        </div>\n\n        \x3c!-- 거리 --\x3e\n        <div class="form-item form-item--required">\n          <label for="distance text-caption">거리(도보 이동 시간) </label>\n          <select name="distance" id="distance" required>\n            <option value="">선택해 주세요</option>\n            <option value="5">5분 내</option>\n            <option value="10">10분 내</option>\n            <option value="15">15분 내</option>\n            <option value="20">20분 내</option>\n            <option value="30">30분 내</option>\n          </select>\n        </div>\n\n        \x3c!-- 설명 --\x3e\n        <div class="form-item">\n          <label for="description text-caption">설명</label>\n          <textarea\n            name="description"\n            id="description"\n            cols="30"\n            rows="5"\n          ></textarea>\n          <span class="help-text text-caption"\n            >메뉴 등 추가 정보를 입력해 주세요.</span\n          >\n        </div>\n\n        \x3c!-- 링크 --\x3e\n        <div class="form-item">\n          <label for="link text-caption">참고 링크</label>\n          <input type="text" name="link" id="link" />\n          <span class="help-text text-caption"\n            >매장 정보를 확인할 수 있는 링크를 입력해 주세요.</span\n          >\n        </div>\n      </div>\n      \x3c!-- 취소/추가 버튼 --\x3e\n      <div class="button-container">\n        <button\n          id="form-cancel-button"\n          type="button"\n          class="button button--secondary text-caption"\n        >\n          취소하기\n        </button>\n        <button id="add-button" class="button button--primary text-caption">\n          추가하기\n        </button>\n      </div>\n    </form>\n    '}render(){this.$target.innerHTML=this.template()}setSubmitEvent(n){this.$target.querySelector("#add-restaurant-form").addEventListener("submit",(t=>{t.preventDefault();const e=[...t.target].reduce(((n,t)=>"BUTTON"===t.nodeName?n:{...n,[t.id]:t.value}),{});n.addRestaurant(e),this.toggleModal()}))}setOnClickCancelEvent(){this.$target.querySelector("#form-cancel-button").addEventListener("click",this.toggleModal.bind(this))}toggleModal(){this.$target.closest(".modal").classList.toggle("modal--open")}setEvent(n){this.setSubmitEvent(n),this.setOnClickCancelEvent()}}(t).setEvent(n)}renderRestaurantDetail(n,t){const e=this.$target.querySelector(".modal-container");new class{constructor(n,t){this.$target=n,this.restaurantInfo=t,this.render()}template(){return`\n    <div class="restaurant-detail-container">\n      <div class="category-and-favorite">\n        <div class="restaurant__category">\n          <img\n            src="./category-${S(this.restaurantInfo.category)}.png"\n            alt="${this.restaurantInfo.category}"\n            class="category-icon"\n          />\n        </div>\n        <div class="detail-favorite">\n          <img\n            src="./favorite-icon-${this.restaurantInfo.favorite?"filled":"lined"}.png"\n            alt="즐겨찾기"\n          />\n        </div>\n      </div>\n      <h3 class="restaurant__name text-subtitle detail-subtitle">${this.restaurantInfo.name}</h3>\n      <span class="restaurant__distance text-body"\n        >캠퍼스부터 ${this.restaurantInfo.distance}분 내</span\n      >\n      <p class="restaurant__description text-body">\n        ${this.restaurantInfo.description}\n      </p>\n      <a href="${this.restaurantInfo.link}" target="_blank">${this.restaurantInfo.link}</a>\n      <div class="button-container">\n        <button\n          id="detail-remove-button"\n          type="button"\n          class="button button--primary text-caption"\n        >\n          삭제하기\n        </button>\n        <button id="detail-cancel-button" class="button button--secondary text-caption">\n          닫기\n        </button>\n      </div>\n    </div>\n    `}render(){this.$target.innerHTML=this.template()}toggleModal(){this.$target.closest(".modal").classList.toggle("modal--open")}setOnClickFavoriteEvent(n){this.$target.querySelector(".detail-favorite").addEventListener("click",(t=>{n.changeFavoriteState(this.restaurantInfo.id),t.target.src=`./favorite-icon-${this.restaurantInfo.favorite?"lined":"filled"}.png`,this.restaurantInfo.favorite=!this.restaurantInfo.favorite}))}setOnClickRemoveEvent(n){this.$target.querySelector("#detail-remove-button").addEventListener("click",(()=>{n.removeRestaurant(this.restaurantInfo.id),this.toggleModal()}))}setOnClickCloseEvent(){this.$target.querySelector("#detail-cancel-button").addEventListener("click",this.toggleModal.bind(this))}setEvent(n){this.setOnClickFavoriteEvent(n),this.setOnClickRemoveEvent(n),this.setOnClickCloseEvent()}}(e,n).setEvent(t)}setOnClickBackDropEvent(){this.$target.querySelector(".modal-backdrop").addEventListener("click",this.toggle.bind(this))}setEvent(){this.setOnClickBackDropEvent()}}(x(".modal")),P=new class{constructor(n){this.$target=n,this.render()}template(){return'\n        <h1 class="gnb__title text-title">점심 뭐 먹지</h1>\n        <button type="button" class="gnb__button" aria-label="음식점 추가">\n          <img src="./add-button.png" alt="음식점 추가" />\n        </button>\n        '}render(){this.$target.insertAdjacentHTML("beforeend",this.template())}setAddButtonClickEvent(n,t){this.$target.querySelector(".gnb__button").addEventListener("click",(()=>{n.renderAddRestaurantForm(t),n.toggle()}))}setEvent(n,t){this.setAddButtonClickEvent(n,t)}}(x(".gnb")),H=new class{constructor(n){this.$target=n,this.render()}template(){return'\n        <input type="radio" name="tab" id="all" value="all" checked />  \n        <label for="all" class=\'tab-item all-tab\'>\n          모든 음식점\n        </label>\n        \n        <input type="radio" name="tab" id="favorite" value="favorite" />\n        <label for="favorite" class=\'tab-item favorite-tab\'>\n          자주 가는 음식점\n        </label>\n        '}render(){this.$target.insertAdjacentHTML("beforeend",this.template())}onChangeAllTab(n){const t=x(".restaurant-filter-container");t.classList.add("filter--visible");const e=t.querySelector("#category-filter").value,r=t.querySelector("#category-filter").value;n.renderFilteredList(e,r)}onChangeFavoriteTab(n){x(".restaurant-filter-container").classList.remove("filter--visible"),n.renderFavoriteList()}setOnChangeTabEvent(n){this.$target.addEventListener("change",(t=>{const e=t.target.value;"all"===e&&this.onChangeAllTab(n),"favorite"===e&&this.onChangeFavoriteTab(n)}))}setEvent(n){this.setOnChangeTabEvent(n)}}(x(".restaurant-tab-container")),W=new class{constructor(n){this.$target=n,this.render()}template(){return`\n        <select name="category" id="category-filter" class="restaurant-filter">\n          ${Object.values(h).map((n=>`<option value=${n}>${n}</option>`))}\n        </select>\n\n        <select name="sorting" id="sorting-filter" class="restaurant-filter">\n          ${Object.values(m).map((n=>`<option value="${n}"}>${n}</option>`))}\n        </select>\n    `}toggle(){this.$target.classList.toggle("filter--visible")}render(){this.$target.insertAdjacentHTML("beforeend",this.template())}setOnChangeCategoryEvent(n){this.$target.querySelector("#sorting-filter").addEventListener("change",(t=>{const e=t.target.value,r=this.$target.querySelector("#category-filter").value;n.renderFilteredList(r,e)}))}setOnChangeSortEvent(n){this.$target.querySelector("#category-filter").addEventListener("change",(t=>{const e=t.target.value,r=this.$target.querySelector("#sorting-filter").value;n.renderFilteredList(e,r)}))}setEvent(n){this.setOnChangeCategoryEvent(n),this.setOnChangeSortEvent(n)}}(x(".restaurant-filter-container")),U=new class{constructor(n,t){this.$target=n,this.modal=t;const e=F.getData("list");this.restaurantListManager=new q(e),this.render(),this.renderAllList()}template(){return'\n      <ul class="restaurant-list">\n      </ul>\n    '}render(){this.$target.innerHTML=this.template()}renderList(n){const t=this.$target.querySelector(".restaurant-list");t.innerHTML="",n.forEach((n=>{new class{constructor(n,t){this.$target=n,this.restaurantInfo=t,this.render()}template(){return`\n        <li id="restaurant${this.restaurantInfo.id}" class="restaurant">\n        <div class="restaurant__category">\n          <img\n            src="./category-${S(this.restaurantInfo.category)}.png"\n            alt="${this.restaurantInfo.category}"\n            class="category-icon"\n          />\n        </div>\n        <div class="restaurant__info">\n          <h3 class="restaurant__name text-subtitle">${this.restaurantInfo.name}</h3>\n          <span class="restaurant__distance text-body"\n            >캠퍼스부터 ${this.restaurantInfo.distance}분 내</span\n          >\n          <p class="restaurant__description text-body">\n            ${this.restaurantInfo.description}\n          </p>\n        </div>\n        <div class="favorite">\n          <img\n            src="./favorite-icon-${this.restaurantInfo.favorite?"filled":"lined"}.png"\n            alt="즐겨찾기"\n          />\n        </div>\n      </li>\n        `}render(){this.$target.insertAdjacentHTML("beforeend",this.template())}setOnClickFavoriteEvent(n){this.$target.querySelector(`#restaurant${this.restaurantInfo.id}`).addEventListener("click",(t=>{t.target.closest(".favorite")&&n.changeFavoriteState(this.restaurantInfo.id)}))}setOnClickItemEvent(n){this.$target.querySelector(`#restaurant${this.restaurantInfo.id}`).addEventListener("click",(t=>{t.target.closest(".favorite")||(n.modal.renderRestaurantDetail(this.restaurantInfo,n),n.modal.toggle())}))}setEvent(n){this.setOnClickFavoriteEvent(n),this.setOnClickItemEvent(n)}}(t,n,this).setEvent(this)}))}renderAllList(){const n=this.restaurantListManager.getRestaurantList();this.renderList(n)}renderFilteredList(n,t){const e=this.restaurantListManager.getRestaurantList(n,t);this.renderList(e)}renderFavoriteList(){const n=this.restaurantListManager.getFavoriteList();this.renderList(n)}renderListAfterDataChange(){const n=x('input[name="tab"]:checked').value;if("favorite"!==n){if("all"===n){const n=x("#category-filter").value,t=x("#sorting-filter").value;this.renderFilteredList(n,t)}}else this.renderFavoriteList()}changeFavoriteState(n){this.restaurantListManager.toggleFavoriteState(Number(n)),F.setData("list",this.restaurantListManager.getRestaurantList()),this.renderListAfterDataChange()}addRestaurant(n){this.restaurantListManager.addRestaurant({...n,id:Date.now(),favorite:!1}),F.setData("list",this.restaurantListManager.getRestaurantList()),this.renderListAfterDataChange()}removeRestaurant(n){this.restaurantListManager.removeRestaurant(n),F.setData("list",this.restaurantListManager.getRestaurantList()),this.renderListAfterDataChange()}}(x(".restaurant-list-container"),N);N.setEvent(U),P.setEvent(N,U),W.setEvent(U),H.setEvent(U)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBc0JoRSxvQkFBb0IyRSxPQUFPRCxJQUN0RCxVQUFxQixPQUFRL08sS0FBS3FPLHNCQUFzQnJFLHFCQUN4RGhLLEtBQUs4TywyQkFDVCxDQUNBbkYsY0FBY3NDLEdBQ1ZqTSxLQUFLcU8sc0JBQXNCMUUsY0FBYyxJQUFLc0MsRUFBZXRNLEdBQUlzUCxLQUFLQyxNQUFPOUUsVUFBVSxJQUN2RixVQUFxQixPQUFRcEssS0FBS3FPLHNCQUFzQnJFLHFCQUN4RGhLLEtBQUs4TywyQkFDVCxDQUNBakYsaUJBQWlCa0YsR0FDYi9PLEtBQUtxTyxzQkFBc0J4RSxpQkFBaUJrRixHQUM1QyxVQUFxQixPQUFRL08sS0FBS3FPLHNCQUFzQnJFLHFCQUN4RGhLLEtBQUs4TywyQkFDVCxHTDFEc0N4RyxFQUFFLDhCQUErQjRDLEdBQzNFQSxFQUFNd0IsU0FBU2hCLEdBQ2Z5QixFQUFPVCxTQUFTeEIsRUFBT1EsR0FDdkI1QixFQUFPNEMsU0FBU2hCLEdBQ2hCMkIsRUFBSVgsU0FBU2hCLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0ZpbHRlci9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvaW5kZXguY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwvQWRkUmVzdGF1cmFudEZvcm1Nb2RhbC9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9SZXN0YXVyYW50RGV0YWlsTW9kYWwvaW5kZXguY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwvaW5kZXguY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudEl0ZW0vaW5kZXguY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvaW5kZXguY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvVGFiL2luZGV4LmNzcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9nbG9iYWwuY3NzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvaW1hZ2VzL2FkZC1idXR0b24ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2ltYWdlcy9jYXRlZ29yeS1hc2lhbi5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvaW1hZ2VzL2NhdGVnb3J5LWNoaW5lc2UucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2ltYWdlcy9jYXRlZ29yeS1ldGMucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2ltYWdlcy9jYXRlZ29yeS1qYXBhbmVzZS5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvaW1hZ2VzL2NhdGVnb3J5LWtvcmVhbi5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvaW1hZ2VzL2NhdGVnb3J5LXdlc3Rlcm4ucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2ltYWdlcy9mYXZvcml0ZS1pY29uLWZpbGxlZC5wbmciLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvaW1hZ2VzL2Zhdm9yaXRlLWljb24tbGluZWQucG5nIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2dsb2JhbC5jc3M/ZDNiYyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0ZpbHRlci9pbmRleC5jc3M/ZmU2MyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvaW5kZXguY3NzPzMxNzEiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvdXRpbC9kb20uanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9UYWIvaW5kZXguY3NzPzEzNGUiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9pbmRleC5jc3M/NmExNSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL01vZGFsL0FkZFJlc3RhdXJhbnRGb3JtTW9kYWwvaW5kZXguY3NzPzkyMWMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9BZGRSZXN0YXVyYW50Rm9ybU1vZGFsL2luZGV4LmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3V0aWwvdHJhbnNsYXRlQ2F0ZWdvcnkudHMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9SZXN0YXVyYW50RGV0YWlsTW9kYWwvaW5kZXguY3NzPzgxZmUiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9pbmRleC5jc3M/ODcyZSIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9kb21haW4vUmVzdGF1cmFudExpc3RNYW5hZ2VyLnRzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL3V0aWwvTG9jYWxTdG9yYWdlLmpzIiwid2VicGFjazovL0B3b293YWNvdXJzZS9qYXZhc2NyaXB0LWx1bmNoLy4vc3JjL2NvbXBvbmVudHMvUmVzdGF1cmFudExpc3QvUmVzdGF1cmFudEl0ZW0vaW5kZXguY3NzPzc0ZWUiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9SZXN0YXVyYW50SXRlbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vQHdvb3dhY291cnNlL2phdmFzY3JpcHQtbHVuY2gvLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL01vZGFsL1Jlc3RhdXJhbnREZXRhaWxNb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1RhYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL0ZpbHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9Ad29vd2Fjb3Vyc2UvamF2YXNjcmlwdC1sdW5jaC8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcbiAgbWFyZ2luLXRvcDogMjRweDtcXG59XFxuXFxuLmZpbHRlci0tdmlzaWJsZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBtaW4td2lkdGg6IDEyNXB4O1xcblxcbiAgYm9yZGVyOiAxcHggc29saWQgI2QwZDVkZDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudC1maWx0ZXIge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9GaWx0ZXIvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4Qjs7RUFFOUIsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFlBQVk7RUFDWixnQkFBZ0I7O0VBRWhCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50LWZpbHRlci1jb250YWluZXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5maWx0ZXItLXZpc2libGUge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lciBzZWxlY3Qge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbiAgbWluLXdpZHRoOiAxMjVweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMGQ1ZGQ7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLnJlc3RhdXJhbnQtZmlsdGVyIHtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmduYiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGhlaWdodDogNjRweDtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4uZ25iX190aXRsZSB7XFxuICBjb2xvcjogI2ZjZmNmZDtcXG59XFxuXFxuLmduYl9fYnV0dG9uIHtcXG4gIGhlaWdodDogNDBweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZ25iX19idXR0b24gaW1nIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBvYmplY3QtZml0OiBjb250YWluO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsWUFBWTs7RUFFWixlQUFlOztFQUVmLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxZQUFZOztFQUVaLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsdUJBQXVCOztFQUV2QixlQUFlO0VBQ2YsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZ25iIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgaGVpZ2h0OiA2NHB4O1xcblxcbiAgcGFkZGluZzogMCAxNnB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi5nbmJfX3RpdGxlIHtcXG4gIGNvbG9yOiAjZmNmY2ZkO1xcbn1cXG5cXG4uZ25iX19idXR0b24ge1xcbiAgaGVpZ2h0OiA0MHB4O1xcblxcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBmb250LXNpemU6IDI0cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5nbmJfX2J1dHRvbiBpbWcge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tb2RhbC10aXRsZSB7XFxuICBtYXJnaW4tYm90dG9tOiAzNnB4O1xcbn1cXG5cXG4jYWRkLXJlc3RhdXJhbnQtZm9ybSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIGhlaWdodDogNzB2aDtcXG5cXG4gIGdhcDogMTBweDtcXG59XFxuXFxuLmZvcm0taXRlbS1jb250YWluZXIge1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG59XFxuXFxuLmZvcm0taXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gbGFiZWwge1xcbiAgY29sb3I6IHZhcigtLWdyZXktNDAwKTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLmZvcm0taXRlbS0tcmVxdWlyZWQgbGFiZWw6OmFmdGVyIHtcXG4gIHBhZGRpbmctbGVmdDogNHB4O1xcblxcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbiAgY29udGVudDogXFxcIipcXFwiO1xcbn1cXG5cXG4uZm9ybS1pdGVtIC5oZWxwLXRleHQge1xcbiAgY29sb3I6IHZhcigtLWdyZXktMzAwKTtcXG59XFxuXFxuLmZvcm0taXRlbSBpbnB1dCxcXG4uZm9ybS1pdGVtIHRleHRhcmVhLFxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEge1xcbiAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4uZm9ybS1pdGVtIHNlbGVjdCB7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBwYWRkaW5nOiA4cHg7XFxuXFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTIwMCk7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG5pbnB1dFtuYW1lPVxcXCJuYW1lXFxcIl0sXFxuaW5wdXRbbmFtZT1cXFwibGlua1xcXCJdIHtcXG4gIGhlaWdodDogNDRweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwvQWRkUmVzdGF1cmFudEZvcm1Nb2RhbC9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCOztFQUV0QixZQUFZOztFQUVaLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsaUJBQWlCOztFQUVqQiwyQkFBMkI7RUFDM0IsWUFBWTtBQUNkOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBOzs7RUFHRSxZQUFZO0VBQ1osYUFBYTs7RUFFYixpQ0FBaUM7RUFDakMsa0JBQWtCOztFQUVsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsWUFBWTs7RUFFWixZQUFZOztFQUVaLGlDQUFpQztFQUNqQyxrQkFBa0I7O0VBRWxCLHNCQUFzQjtBQUN4Qjs7QUFFQTs7RUFFRSxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1vZGFsLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDM2cHg7XFxufVxcblxcbiNhZGQtcmVzdGF1cmFudC1mb3JtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgaGVpZ2h0OiA3MHZoO1xcblxcbiAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtLWNvbnRhaW5lciB7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cXG4uZm9ybS1pdGVtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgbWFyZ2luLWJvdHRvbTogMzZweDtcXG59XFxuXFxuLmZvcm0taXRlbSBsYWJlbCB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS00MDApO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4uZm9ybS1pdGVtLS1yZXF1aXJlZCBsYWJlbDo6YWZ0ZXIge1xcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XFxuXFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuICBjb250ZW50OiBcXFwiKlxcXCI7XFxufVxcblxcbi5mb3JtLWl0ZW0gLmhlbHAtdGV4dCB7XFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG4uZm9ybS1pdGVtIGlucHV0LFxcbi5mb3JtLWl0ZW0gdGV4dGFyZWEsXFxuLmZvcm0taXRlbSBzZWxlY3Qge1xcbiAgcGFkZGluZzogOHB4O1xcbiAgbWFyZ2luOiA2cHggMDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLmZvcm0taXRlbSB0ZXh0YXJlYSB7XFxuICByZXNpemU6IG5vbmU7XFxufVxcblxcbi5mb3JtLWl0ZW0gc2VsZWN0IHtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIHBhZGRpbmc6IDhweDtcXG5cXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyZXktMjAwKTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbmlucHV0W25hbWU9XFxcIm5hbWVcXFwiXSxcXG5pbnB1dFtuYW1lPVxcXCJsaW5rXFxcIl0ge1xcbiAgaGVpZ2h0OiA0NHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC1kZXRhaWwtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgZ2FwOiAxNnB4O1xcbn1cXG5cXG4uY2F0ZWdvcnktYW5kLWZhdm9yaXRlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi5kZXRhaWwtc3VidGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbn1cXG5cXG4uZGV0YWlsLWZhdm9yaXRlIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTW9kYWwvUmVzdGF1cmFudERldGFpbE1vZGFsL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudC1kZXRhaWwtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgZ2FwOiAxNnB4O1xcbn1cXG5cXG4uY2F0ZWdvcnktYW5kLWZhdm9yaXRlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi5kZXRhaWwtc3VidGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbn1cXG5cXG4uZGV0YWlsLWZhdm9yaXRlIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1vZGFsIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5tb2RhbC0tb3BlbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLm1vZGFsLWJhY2tkcm9wIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG5cXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4zNSk7XFxufVxcblxcbi5tb2RhbC1jb250YWluZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgYm90dG9tOiAwO1xcbiAgbWF4LWhlaWdodDogOTAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuXFxuICBwYWRkaW5nOiAzMnB4IDE2cHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA4cHggOHB4IDBweCAwcHg7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1ncmV5LTEwMCk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL01vZGFsL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsTUFBTTtFQUNOLFFBQVE7RUFDUixTQUFTO0VBQ1QsT0FBTzs7RUFFUCwrQkFBK0I7QUFDakM7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsU0FBUztFQUNULGVBQWU7RUFDZixXQUFXOztFQUVYLGtCQUFrQjs7RUFFbEIsOEJBQThCO0VBQzlCLDJCQUEyQjtBQUM3QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubW9kYWwge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1vZGFsLS1vcGVuIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ubW9kYWwtYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcblxcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjM1KTtcXG59XFxuXFxuLm1vZGFsLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBib3R0b206IDA7XFxuICBtYXgtaGVpZ2h0OiA5MCU7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIHBhZGRpbmc6IDMycHggMTZweDtcXG5cXG4gIGJvcmRlci1yYWRpdXM6IDhweCA4cHggMHB4IDBweDtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWdyZXktMTAwKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnJlc3RhdXJhbnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcblxcbiAgcGFkZGluZzogMTZweCA4cHg7XFxuXFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U5ZWFlZDtcXG5cXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX2NhdGVnb3J5IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogNjRweDtcXG4gIGhlaWdodDogNjRweDtcXG4gIG1pbi13aWR0aDogNjRweDtcXG4gIG1pbi1oZWlnaHQ6IDY0cHg7XFxuXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1saWdodGVuLWNvbG9yKTtcXG59XFxuXFxuLmNhdGVnb3J5LWljb24ge1xcbiAgd2lkdGg6IDM2cHg7XFxuICBoZWlnaHQ6IDM2cHg7XFxufVxcblxcbi5yZXN0YXVyYW50X19pbmZvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fbmFtZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5yZXN0YXVyYW50X19kaXN0YW5jZSB7XFxuICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxufVxcblxcbi5yZXN0YXVyYW50X19kZXNjcmlwdGlvbiB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG5cXG4gIHBhZGRpbmctdG9wOiA4cHg7XFxuXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDI7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbn1cXG5cXG4uZmF2b3JpdGUge1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1Jlc3RhdXJhbnRMaXN0L1Jlc3RhdXJhbnRJdGVtL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7O0VBRXZCLGlCQUFpQjs7RUFFakIsZ0NBQWdDOztFQUVoQyxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsV0FBVztFQUNYLFlBQVk7RUFDWixlQUFlO0VBQ2YsZ0JBQWdCOztFQUVoQixrQkFBa0I7O0VBRWxCLGtCQUFrQjtFQUNsQixnQ0FBZ0M7QUFDbEM7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtBQUNkOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxvQkFBb0I7O0VBRXBCLGdCQUFnQjs7RUFFaEIsZ0JBQWdCO0VBQ2hCLHVCQUF1QjtFQUN2QixxQkFBcUI7RUFDckIsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yZXN0YXVyYW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG5cXG4gIHBhZGRpbmc6IDE2cHggOHB4O1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVhZWQ7XFxuXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5yZXN0YXVyYW50X19jYXRlZ29yeSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDY0cHg7XFxuICBoZWlnaHQ6IDY0cHg7XFxuICBtaW4td2lkdGg6IDY0cHg7XFxuICBtaW4taGVpZ2h0OiA2NHB4O1xcblxcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcblxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYmFja2dyb3VuZDogdmFyKC0tbGlnaHRlbi1jb2xvcik7XFxufVxcblxcbi5jYXRlZ29yeS1pY29uIHtcXG4gIHdpZHRoOiAzNnB4O1xcbiAgaGVpZ2h0OiAzNnB4O1xcbn1cXG5cXG4ucmVzdGF1cmFudF9faW5mbyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxuLnJlc3RhdXJhbnRfX25hbWUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fZGlzdGFuY2Uge1xcbiAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xcbn1cXG5cXG4ucmVzdGF1cmFudF9fZGVzY3JpcHRpb24ge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuXFxuICBwYWRkaW5nLXRvcDogOHB4O1xcblxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbiAgLXdlYmtpdC1saW5lLWNsYW1wOiAyO1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG59XFxuXFxuLmZhdm9yaXRlIHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbjogMTZweCAwO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdC9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCOztFQUV0QixlQUFlO0VBQ2YsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIHBhZGRpbmc6IDAgMTZweDtcXG4gIG1hcmdpbjogMTZweCAwO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVzdGF1cmFudC10YWItY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuXFxuICBtYXJnaW4tdG9wOiAyMnB4O1xcbiAgcGFkZGluZzogMCAxNnB4O1xcblxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFiLWl0ZW0ge1xcbiAgd2lkdGg6IDUwJTtcXG5cXG4gIHBhZGRpbmc6IDlweCAwO1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNkMGQ1ZGQ7XFxuXFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBjb2xvcjogIzY2NzA4NTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQgKyAudGFiLWl0ZW0ge1xcbiAgYm9yZGVyLWNvbG9yOiAjZWM0YTBhO1xcbiAgY29sb3I6ICNlYzRhMGE7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1RhYi9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhOztFQUViLGdCQUFnQjtFQUNoQixlQUFlOztFQUVmLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFVBQVU7O0VBRVYsY0FBYzs7RUFFZCxnQ0FBZ0M7O0VBRWhDLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVzdGF1cmFudC10YWItY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuXFxuICBtYXJnaW4tdG9wOiAyMnB4O1xcbiAgcGFkZGluZzogMCAxNnB4O1xcblxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFiLWl0ZW0ge1xcbiAgd2lkdGg6IDUwJTtcXG5cXG4gIHBhZGRpbmc6IDlweCAwO1xcblxcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNkMGQ1ZGQ7XFxuXFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBjb2xvcjogIzY2NzA4NTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQgKyAudGFiLWl0ZW0ge1xcbiAgYm9yZGVyLWNvbG9yOiAjZWM0YTBhO1xcbiAgY29sb3I6ICNlYzRhMGE7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbnVsLFxcbmxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLyogQ29sb3JzICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbjpyb290IHtcXG4gIC0tcHJpbWFyeS1jb2xvcjogI2VjNGEwYTtcXG4gIC0tbGlnaHRlbi1jb2xvcjogI2Y2YTg4YTtcXG4gIC0tZ3JleS0xMDA6ICNmZmZmZmY7XFxuICAtLWdyZXktMjAwOiAjZDBkNWRkO1xcbiAgLS1ncmV5LTMwMDogIzY2NzA4NTtcXG4gIC0tZ3JleS00MDA6ICMzNDQwNTQ7XFxuICAtLWdyZXktNTAwOiAjMDAwMDAwO1xcbn1cXG5cXG4vKiBUeXBvZ3JhcGh5ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLnRleHQtdGl0bGUge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1zdWJ0aXRsZSB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi50ZXh0LWJvZHkge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4udGV4dC1jYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLyogQnV0dG9uICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLmJ1dHRvbi1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNDRweDtcXG5cXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG5cXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG5cXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5idXR0b246bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi5idXR0b24tLXNlY29uZGFyeSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ncmV5LTMwMCk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG5cXG4gIGNvbG9yOiB2YXIoLS1ncmV5LTMwMCk7XFxufVxcblxcbi5idXR0b24tLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0xMDApO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvZ2xvYmFsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFVBQVU7RUFDVixTQUFTO0VBQ1Qsc0JBQXNCO0FBQ3hCOztBQUVBOztFQUVFLGdCQUFnQjtBQUNsQjs7QUFFQTs7RUFFRSx1QkFBdUI7RUFDdkIsZUFBZTtBQUNqQjs7QUFFQSxtREFBbUQ7QUFDbkQ7RUFDRSx3QkFBd0I7RUFDeEIsd0JBQXdCO0VBQ3hCLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUEsbURBQW1EO0FBQ25EO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUEsK0NBQStDO0FBQy9DO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7O0VBRVosa0JBQWtCOztFQUVsQixZQUFZO0VBQ1osa0JBQWtCOztFQUVsQixnQkFBZ0I7RUFDaEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxpQ0FBaUM7RUFDakMsdUJBQXVCOztFQUV2QixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxnQ0FBZ0M7O0VBRWhDLHNCQUFzQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG51bCxcXG5saSB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5odG1sLFxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi8qIENvbG9ycyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG46cm9vdCB7XFxuICAtLXByaW1hcnktY29sb3I6ICNlYzRhMGE7XFxuICAtLWxpZ2h0ZW4tY29sb3I6ICNmNmE4OGE7XFxuICAtLWdyZXktMTAwOiAjZmZmZmZmO1xcbiAgLS1ncmV5LTIwMDogI2QwZDVkZDtcXG4gIC0tZ3JleS0zMDA6ICM2NjcwODU7XFxuICAtLWdyZXktNDAwOiAjMzQ0MDU0O1xcbiAgLS1ncmV5LTUwMDogIzAwMDAwMDtcXG59XFxuXFxuLyogVHlwb2dyYXBoeSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi50ZXh0LXRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLnRleHQtc3VidGl0bGUge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGV4dC1ib2R5IHtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuXFxuLnRleHQtY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi8qIEJ1dHRvbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi5idXR0b24tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5idXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuXFxuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XFxuXFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYnV0dG9uOmxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcbn1cXG5cXG4uYnV0dG9uLS1zZWNvbmRhcnkge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JleS0zMDApO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICBjb2xvcjogdmFyKC0tZ3JleS0zMDApO1xcbn1cXG5cXG4uYnV0dG9uLS1wcmltYXJ5IHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktY29sb3IpO1xcblxcbiAgY29sb3I6IHZhcigtLWdyZXktMTAwKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhZGQtYnV0dG9uLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1hc2lhbi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktY2hpbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnktZXRjLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS1qYXBhbmVzZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2F0ZWdvcnkta29yZWFuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjYXRlZ29yeS13ZXN0ZXJuLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZvcml0ZS1pY29uLWZpbGxlZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2b3JpdGUtaWNvbi1saW5lZC5wbmdcIjsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2xvYmFsLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2xvYmFsLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBjb25zdCBDQVRFR09SWSA9IHtcbiAgICBBTEw6IFwi7KCE7LK0XCIsXG4gICAgS09SRUFOOiBcIu2VnOyLnVwiLFxuICAgIEpBUEFORVNFOiBcIuydvOyLnVwiLFxuICAgIENISU5FU0U6IFwi7KSR7IudXCIsXG4gICAgQVNJQU46IFwi7JWE7Iuc7JWIXCIsXG4gICAgV0VTVEVSTjogXCLslpHsi51cIixcbiAgICBFVEM6IFwi6riw7YOAXCIsXG59O1xuZXhwb3J0IGNvbnN0IENBVEVHT1JZX0VORyA9IHtcbiAgICBBTEw6IFwiYWxsXCIsXG4gICAgS09SRUFOOiBcImtvcmVhblwiLFxuICAgIEpBUEFORVNFOiBcImphcGFuZXNlXCIsXG4gICAgQ0hJTkVTRTogXCJjaGluZXNlXCIsXG4gICAgQVNJQU46IFwiYXNpYW5cIixcbiAgICBXRVNURVJOOiBcIndlc3Rlcm5cIixcbiAgICBFVEM6IFwiZXRjXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNPUlQgPSB7XG4gICAgTkFNRTogXCLsnbTrpoTsiJxcIixcbiAgICBESVNUQU5DRTogXCLqsbDrpqzsiJxcIixcbn07XG5leHBvcnQgY29uc3QgU09SVF9FTkcgPSB7XG4gICAgTkFNRTogXCJuYW1lXCIsXG4gICAgRElTVEFOQ0U6IFwiZGlzdGFuY2VcIixcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuY2xhc3MgSGVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigkdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuJHRhcmdldCA9ICR0YXJnZXQ7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICA8aDEgY2xhc3M9XCJnbmJfX3RpdGxlIHRleHQtdGl0bGVcIj7soJDsi6wg662QIOuoueyngDwvaDE+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZ25iX19idXR0b25cIiBhcmlhLWxhYmVsPVwi7J2M7Iud7KCQIOy2lOqwgFwiPlxuICAgICAgICAgIDxpbWcgc3JjPVwiLi9hZGQtYnV0dG9uLnBuZ1wiIGFsdD1cIuydjOyLneygkCDstpTqsIBcIiAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgYDtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLiR0YXJnZXQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIHRoaXMudGVtcGxhdGUoKSk7XG4gICAgfVxuICAgIHNldEFkZEJ1dHRvbkNsaWNrRXZlbnQobW9kYWwsIHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5xdWVyeVNlbGVjdG9yKFwiLmduYl9fYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBtb2RhbC5yZW5kZXJBZGRSZXN0YXVyYW50Rm9ybShyZXN0YXVyYW50TGlzdCk7XG4gICAgICAgICAgICBtb2RhbC50b2dnbGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldEV2ZW50KG1vZGFsLCByZXN0YXVyYW50TGlzdCkge1xuICAgICAgICB0aGlzLnNldEFkZEJ1dHRvbkNsaWNrRXZlbnQobW9kYWwsIHJlc3RhdXJhbnRMaXN0KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCJleHBvcnQgY29uc3QgJCA9IChzZWxlY3RvcikgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG5leHBvcnQgY29uc3QgJCQgPSAoc2VsZWN0b3IpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcbmNsYXNzIEFkZFJlc3RhdXJhbnRGb3JtTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKCR0YXJnZXQsIHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIHRoaXMuJHRhcmdldCA9ICR0YXJnZXQ7XG4gICAgICAgIHRoaXMucmVzdGF1cmFudExpc3QgPSByZXN0YXVyYW50TGlzdDtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgPGgyIGNsYXNzPVwibW9kYWwtdGl0bGUgdGV4dC10aXRsZVwiPuyDiOuhnOyatCDsnYzsi53soJA8L2gyPlxuICAgIDxmb3JtIGlkPVwiYWRkLXJlc3RhdXJhbnQtZm9ybVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0taXRlbS1jb250YWluZXJcIj5cbiAgICAgICAgPCEtLSDsubTthYzqs6DrpqwgLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWl0ZW0gZm9ybS1pdGVtLS1yZXF1aXJlZFwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJjYXRlZ29yeSB0ZXh0LWNhcHRpb25cIj7subTthYzqs6Drpqw8L2xhYmVsPlxuICAgICAgICAgIDxzZWxlY3QgbmFtZT1cImNhdGVnb3J5XCIgaWQ9XCJjYXRlZ29yeVwiIHJlcXVpcmVkPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPuyEoO2Dne2VtCDso7zshLjsmpQ8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLtlZzsi51cIj7tlZzsi508L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLspJHsi51cIj7spJHsi508L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLsnbzsi51cIj7snbzsi508L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLslpHsi51cIj7slpHsi508L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLslYTsi5zslYhcIj7slYTsi5zslYg8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCLquLDtg4BcIj7quLDtg4A8L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPCEtLSDsnYzsi53soJAg7J2066aEIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pdGVtIGZvcm0taXRlbS0tcmVxdWlyZWRcIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwibmFtZSB0ZXh0LWNhcHRpb25cIj7snbTrpoQ8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJuYW1lXCIgaWQ9XCJuYW1lXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPCEtLSDqsbDrpqwgLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWl0ZW0gZm9ybS1pdGVtLS1yZXF1aXJlZFwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJkaXN0YW5jZSB0ZXh0LWNhcHRpb25cIj7qsbDrpqwo64+E67O0IOydtOuPmSDsi5zqsIQpIDwvbGFiZWw+XG4gICAgICAgICAgPHNlbGVjdCBuYW1lPVwiZGlzdGFuY2VcIiBpZD1cImRpc3RhbmNlXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+7ISg7YOd7ZW0IOyjvOyEuOyalDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjVcIj4167aEIOuCtDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjEwXCI+MTDrtoQg64K0PC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMTVcIj4xNeu2hCDrgrQ8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIyMFwiPjIw67aEIOuCtDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjMwXCI+MzDrtoQg64K0PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwhLS0g7ISk66qFIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pdGVtXCI+XG4gICAgICAgICAgPGxhYmVsIGZvcj1cImRlc2NyaXB0aW9uIHRleHQtY2FwdGlvblwiPuyEpOuqhTwvbGFiZWw+XG4gICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICBuYW1lPVwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgaWQ9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICBjb2xzPVwiMzBcIlxuICAgICAgICAgICAgcm93cz1cIjVcIlxuICAgICAgICAgID48L3RleHRhcmVhPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaGVscC10ZXh0IHRleHQtY2FwdGlvblwiXG4gICAgICAgICAgICA+66mU64m0IOuTsSDstpTqsIAg7KCV67O066W8IOyeheugpe2VtCDso7zshLjsmpQuPC9zcGFuXG4gICAgICAgICAgPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIOunge2BrCAtLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0taXRlbVwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJsaW5rIHRleHQtY2FwdGlvblwiPuywuOqzoCDrp4Htgaw8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJsaW5rXCIgaWQ9XCJsaW5rXCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImhlbHAtdGV4dCB0ZXh0LWNhcHRpb25cIlxuICAgICAgICAgICAgPuunpOyepSDsoJXrs7Trpbwg7ZmV7J247ZWgIOyImCDsnojripQg66eB7YGs66W8IOyeheugpe2VtCDso7zshLjsmpQuPC9zcGFuXG4gICAgICAgICAgPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPCEtLSDst6jshowv7LaU6rCAIOuyhO2KvCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tY29udGFpbmVyXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBpZD1cImZvcm0tY2FuY2VsLWJ1dHRvblwiXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgY2xhc3M9XCJidXR0b24gYnV0dG9uLS1zZWNvbmRhcnkgdGV4dC1jYXB0aW9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIOy3qOyGjO2VmOq4sFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBpZD1cImFkZC1idXR0b25cIiBjbGFzcz1cImJ1dHRvbiBidXR0b24tLXByaW1hcnkgdGV4dC1jYXB0aW9uXCI+XG4gICAgICAgICAg7LaU6rCA7ZWY6riwXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICAgIGA7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LmlubmVySFRNTCA9IHRoaXMudGVtcGxhdGUoKTtcbiAgICB9XG4gICAgc2V0U3VibWl0RXZlbnQocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLXJlc3RhdXJhbnQtZm9ybVwiKS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3RhdXJhbnQgPSBbLi4uZXZlbnQudGFyZ2V0XS5yZWR1Y2UoKHJlc3RhdXJhbnRJbmZvLCBpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5ub2RlTmFtZSA9PT0gXCJCVVRUT05cIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRJbmZvO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnJlc3RhdXJhbnRJbmZvLCBbaW5wdXQuaWRdOiBpbnB1dC52YWx1ZSB9O1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICAgICAgcmVzdGF1cmFudExpc3QuYWRkUmVzdGF1cmFudChuZXdSZXN0YXVyYW50KTtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlTW9kYWwoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldE9uQ2xpY2tDYW5jZWxFdmVudCgpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIjZm9ybS1jYW5jZWwtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnRvZ2dsZU1vZGFsLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICB0b2dnbGVNb2RhbCgpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LmNsb3Nlc3QoXCIubW9kYWxcIikuY2xhc3NMaXN0LnRvZ2dsZShcIm1vZGFsLS1vcGVuXCIpO1xuICAgIH1cbiAgICBzZXRFdmVudChyZXN0YXVyYW50TGlzdCkge1xuICAgICAgICB0aGlzLnNldFN1Ym1pdEV2ZW50KHJlc3RhdXJhbnRMaXN0KTtcbiAgICAgICAgdGhpcy5zZXRPbkNsaWNrQ2FuY2VsRXZlbnQoKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBBZGRSZXN0YXVyYW50Rm9ybU1vZGFsO1xuIiwiaW1wb3J0IHsgQ0FURUdPUlksIENBVEVHT1JZX0VORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCBcIi4uL3R5cGVzL3Jlc3RhdXJhbnRcIjtcbmNvbnN0IHRyYW5zbGF0ZUNhdGVnb3J5ID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgaWYgKGNhdGVnb3J5ID09PSBDQVRFR09SWS5LT1JFQU4pXG4gICAgICAgIHJldHVybiBDQVRFR09SWV9FTkcuS09SRUFOO1xuICAgIGlmIChjYXRlZ29yeSA9PT0gQ0FURUdPUlkuSkFQQU5FU0UpXG4gICAgICAgIHJldHVybiBDQVRFR09SWV9FTkcuSkFQQU5FU0U7XG4gICAgaWYgKGNhdGVnb3J5ID09PSBDQVRFR09SWS5DSElORVNFKVxuICAgICAgICByZXR1cm4gQ0FURUdPUllfRU5HLkNISU5FU0U7XG4gICAgaWYgKGNhdGVnb3J5ID09PSBDQVRFR09SWS5BU0lBTilcbiAgICAgICAgcmV0dXJuIENBVEVHT1JZX0VORy5BU0lBTjtcbiAgICBpZiAoY2F0ZWdvcnkgPT09IENBVEVHT1JZLldFU1RFUk4pXG4gICAgICAgIHJldHVybiBDQVRFR09SWV9FTkcuV0VTVEVSTjtcbiAgICByZXR1cm4gQ0FURUdPUllfRU5HLkVUQztcbn07XG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGVDYXRlZ29yeTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfUmVzdGF1cmFudExpc3RNYW5hZ2VyX2luc3RhbmNlcywgX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9yZXN0YXVyYW50TGlzdCwgX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9jYXRlZ29yaXplUmVzdGF1cmFudHMsIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfc29ydFJlc3RhdXJhbnRzO1xuaW1wb3J0IHsgQ0FURUdPUlksIFNPUlQgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgXCIuLi90eXBlcy9yZXN0YXVyYW50XCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN0YXVyYW50TGlzdE1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9yZXN0YXVyYW50TGlzdC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudExpc3RNYW5hZ2VyX3Jlc3RhdXJhbnRMaXN0LCByZXN0YXVyYW50cywgXCJmXCIpO1xuICAgIH1cbiAgICBhZGRSZXN0YXVyYW50KGluZm8pIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RNYW5hZ2VyX3Jlc3RhdXJhbnRMaXN0LCBcImZcIikucHVzaChpbmZvKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVzdGF1cmFudChpZCkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfcmVzdGF1cmFudExpc3QsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9yZXN0YXVyYW50TGlzdCwgXCJmXCIpLmZpbHRlcigocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5pZCAhPT0gaWQpLCBcImZcIik7XG4gICAgfVxuICAgIGdldFJlc3RhdXJhbnRMaXN0KGNhdGVnb3J5ID0gXCLsoITssrRcIiwgc29ydGluZ1dheSA9IFwi7J2066aE7IicXCIpIHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcml6ZWRMaXN0ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzdGF1cmFudExpc3RNYW5hZ2VyX2luc3RhbmNlcywgXCJtXCIsIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfY2F0ZWdvcml6ZVJlc3RhdXJhbnRzKS5jYWxsKHRoaXMsIGNhdGVnb3J5LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfcmVzdGF1cmFudExpc3QsIFwiZlwiKSk7XG4gICAgICAgIGNvbnN0IHNvcnRlZExpc3QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfaW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9zb3J0UmVzdGF1cmFudHMpLmNhbGwodGhpcywgc29ydGluZ1dheSwgY2F0ZWdvcml6ZWRMaXN0KTtcbiAgICAgICAgcmV0dXJuIHNvcnRlZExpc3Q7XG4gICAgfVxuICAgIGdldEZhdm9yaXRlTGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9yZXN0YXVyYW50TGlzdCwgXCJmXCIpLmZpbHRlcigocmVzdGF1cmFudCkgPT4gcmVzdGF1cmFudC5mYXZvcml0ZSA9PT0gdHJ1ZSk7XG4gICAgfVxuICAgIHRvZ2dsZUZhdm9yaXRlU3RhdGUoaWQpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzdGF1cmFudExpc3RNYW5hZ2VyX3Jlc3RhdXJhbnRMaXN0LCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfcmVzdGF1cmFudExpc3QsIFwiZlwiKS5tYXAoKHJlc3RhdXJhbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN0YXVyYW50LmlkICE9PSBpZClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdGF1cmFudDtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnJlc3RhdXJhbnQsIGZhdm9yaXRlOiAhcmVzdGF1cmFudC5mYXZvcml0ZSB9O1xuICAgICAgICB9KSwgXCJmXCIpO1xuICAgIH1cbn1cbl9SZXN0YXVyYW50TGlzdE1hbmFnZXJfcmVzdGF1cmFudExpc3QgPSBuZXcgV2Vha01hcCgpLCBfUmVzdGF1cmFudExpc3RNYW5hZ2VyX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfY2F0ZWdvcml6ZVJlc3RhdXJhbnRzID0gZnVuY3Rpb24gX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9jYXRlZ29yaXplUmVzdGF1cmFudHMoY2F0ZWdvcnksIHJlc3RhdXJhbnRzKSB7XG4gICAgaWYgKGNhdGVnb3J5ID09PSBDQVRFR09SWS5BTEwpXG4gICAgICAgIHJldHVybiByZXN0YXVyYW50cztcbiAgICByZXR1cm4gcmVzdGF1cmFudHMuZmlsdGVyKChyZXN0YXVyYW50KSA9PiByZXN0YXVyYW50LmNhdGVnb3J5ID09PSBjYXRlZ29yeSk7XG59LCBfUmVzdGF1cmFudExpc3RNYW5hZ2VyX3NvcnRSZXN0YXVyYW50cyA9IGZ1bmN0aW9uIF9SZXN0YXVyYW50TGlzdE1hbmFnZXJfc29ydFJlc3RhdXJhbnRzKHNvcnRpbmdXYXksIHJlc3RhdXJhbnRzKSB7XG4gICAgaWYgKHNvcnRpbmdXYXkgPT09IFNPUlQuTkFNRSkge1xuICAgICAgICByZXR1cm4gWy4uLnJlc3RhdXJhbnRzXS5zb3J0KChhLCBiKSA9PiAoYS5uYW1lID4gYi5uYW1lID8gMSA6IC0xKSk7XG4gICAgfVxuICAgIGlmIChzb3J0aW5nV2F5ID09PSBTT1JULkRJU1RBTkNFKSB7XG4gICAgICAgIHJldHVybiBbLi4ucmVzdGF1cmFudHNdLnNvcnQoKGEsIGIpID0+IGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RhdXJhbnRzO1xufTtcbiIsImNvbnN0IExvY2FsU3RvcmFnZSA9IHtcbiAgICBzZXREYXRhKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH0sXG4gICAgZ2V0RGF0YShrZXkpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIGlmICghaXRlbSlcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoaXRlbSk7XG4gICAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBMb2NhbFN0b3JhZ2U7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuaW1wb3J0IHRyYW5zbGF0ZUNhdGVnb3J5IGZyb20gXCIuLi8uLi8uLi91dGlsL3RyYW5zbGF0ZUNhdGVnb3J5XCI7XG5pbXBvcnQgTG9jYWxTdG9yYWdlIGZyb20gXCIuLi8uLi8uLi91dGlsL0xvY2FsU3RvcmFnZVwiO1xuY2xhc3MgUmVzdGF1cmFudEl0ZW0ge1xuICAgIGNvbnN0cnVjdG9yKCR0YXJnZXQsIHJlc3RhdXJhbnRJbmZvKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldCA9ICR0YXJnZXQ7XG4gICAgICAgIHRoaXMucmVzdGF1cmFudEluZm8gPSByZXN0YXVyYW50SW5mbztcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgIDxsaSBpZD1cInJlc3RhdXJhbnQke3RoaXMucmVzdGF1cmFudEluZm8uaWR9XCIgY2xhc3M9XCJyZXN0YXVyYW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXN0YXVyYW50X19jYXRlZ29yeVwiPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz1cIi4vY2F0ZWdvcnktJHt0cmFuc2xhdGVDYXRlZ29yeSh0aGlzLnJlc3RhdXJhbnRJbmZvLmNhdGVnb3J5KX0ucG5nXCJcbiAgICAgICAgICAgIGFsdD1cIiR7dGhpcy5yZXN0YXVyYW50SW5mby5jYXRlZ29yeX1cIlxuICAgICAgICAgICAgY2xhc3M9XCJjYXRlZ29yeS1pY29uXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJlc3RhdXJhbnRfX2luZm9cIj5cbiAgICAgICAgICA8aDMgY2xhc3M9XCJyZXN0YXVyYW50X19uYW1lIHRleHQtc3VidGl0bGVcIj4ke3RoaXMucmVzdGF1cmFudEluZm8ubmFtZX08L2gzPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVzdGF1cmFudF9fZGlzdGFuY2UgdGV4dC1ib2R5XCJcbiAgICAgICAgICAgID7suqDtjbzsiqTrtoDthLAgJHt0aGlzLnJlc3RhdXJhbnRJbmZvLmRpc3RhbmNlfeu2hCDrgrQ8L3NwYW5cbiAgICAgICAgICA+XG4gICAgICAgICAgPHAgY2xhc3M9XCJyZXN0YXVyYW50X19kZXNjcmlwdGlvbiB0ZXh0LWJvZHlcIj5cbiAgICAgICAgICAgICR7dGhpcy5yZXN0YXVyYW50SW5mby5kZXNjcmlwdGlvbn1cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmF2b3JpdGVcIj5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBzcmM9XCIuL2Zhdm9yaXRlLWljb24tJHt0aGlzLnJlc3RhdXJhbnRJbmZvLmZhdm9yaXRlID8gXCJmaWxsZWRcIiA6IFwibGluZWRcIn0ucG5nXCJcbiAgICAgICAgICAgIGFsdD1cIuymkOqyqOywvuq4sFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2xpPlxuICAgICAgICBgO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgdGhpcy50ZW1wbGF0ZSgpKTtcbiAgICB9XG4gICAgc2V0T25DbGlja0Zhdm9yaXRlRXZlbnQocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoYCNyZXN0YXVyYW50JHt0aGlzLnJlc3RhdXJhbnRJbmZvLmlkfWApLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIuZmF2b3JpdGVcIikpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgcmVzdGF1cmFudExpc3QuY2hhbmdlRmF2b3JpdGVTdGF0ZSh0aGlzLnJlc3RhdXJhbnRJbmZvLmlkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldE9uQ2xpY2tJdGVtRXZlbnQocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoYCNyZXN0YXVyYW50JHt0aGlzLnJlc3RhdXJhbnRJbmZvLmlkfWApLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuY2xvc2VzdChcIi5mYXZvcml0ZVwiKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICByZXN0YXVyYW50TGlzdC5tb2RhbC5yZW5kZXJSZXN0YXVyYW50RGV0YWlsKHRoaXMucmVzdGF1cmFudEluZm8sIHJlc3RhdXJhbnRMaXN0KTtcbiAgICAgICAgICAgIHJlc3RhdXJhbnRMaXN0Lm1vZGFsLnRvZ2dsZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0RXZlbnQocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgdGhpcy5zZXRPbkNsaWNrRmF2b3JpdGVFdmVudChyZXN0YXVyYW50TGlzdCk7XG4gICAgICAgIHRoaXMuc2V0T25DbGlja0l0ZW1FdmVudChyZXN0YXVyYW50TGlzdCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgUmVzdGF1cmFudEl0ZW07XG4iLCJpbXBvcnQgXCIuL2dsb2JhbC5jc3NcIjtcbmltcG9ydCBGaWx0ZXIgZnJvbSBcIi4vY29tcG9uZW50cy9GaWx0ZXJcIjtcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCBUYWIgZnJvbSBcIi4vY29tcG9uZW50cy9UYWJcIjtcbmltcG9ydCBNb2RhbCBmcm9tIFwiLi9jb21wb25lbnRzL01vZGFsXCI7XG5pbXBvcnQgUmVzdGF1cmFudExpc3QgZnJvbSBcIi4vY29tcG9uZW50cy9SZXN0YXVyYW50TGlzdFwiO1xuaW1wb3J0IHsgJCB9IGZyb20gXCIuL3V0aWwvZG9tXCI7XG5jb25zdCBtb2RhbCA9IG5ldyBNb2RhbCgkKFwiLm1vZGFsXCIpKTtcbmNvbnN0IGhlYWRlciA9IG5ldyBIZWFkZXIoJChcIi5nbmJcIikpO1xuY29uc3QgdGFiID0gbmV3IFRhYigkKFwiLnJlc3RhdXJhbnQtdGFiLWNvbnRhaW5lclwiKSk7XG5jb25zdCBmaWx0ZXIgPSBuZXcgRmlsdGVyKCQoXCIucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyXCIpKTtcbmNvbnN0IHJlc3RhdXJhbnRMaXN0ID0gbmV3IFJlc3RhdXJhbnRMaXN0KCQoXCIucmVzdGF1cmFudC1saXN0LWNvbnRhaW5lclwiKSwgbW9kYWwpO1xubW9kYWwuc2V0RXZlbnQocmVzdGF1cmFudExpc3QpO1xuaGVhZGVyLnNldEV2ZW50KG1vZGFsLCByZXN0YXVyYW50TGlzdCk7XG5maWx0ZXIuc2V0RXZlbnQocmVzdGF1cmFudExpc3QpO1xudGFiLnNldEV2ZW50KHJlc3RhdXJhbnRMaXN0KTtcbiIsImltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5pbXBvcnQgQWRkUmVzdGF1cmFudEZvcm1Nb2RhbCBmcm9tIFwiLi9BZGRSZXN0YXVyYW50Rm9ybU1vZGFsXCI7XG5pbXBvcnQgUmVzdGF1cmFudERldGFpbE1vZGFsIGZyb20gXCIuL1Jlc3RhdXJhbnREZXRhaWxNb2RhbFwiO1xuY2xhc3MgTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKCR0YXJnZXQpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0ID0gJHRhcmdldDtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJhY2tkcm9wXCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRhaW5lclwiPjwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgdGhpcy50ZW1wbGF0ZSgpKTtcbiAgICB9XG4gICAgdG9nZ2xlKCkge1xuICAgICAgICB0aGlzLiR0YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZShcIm1vZGFsLS1vcGVuXCIpO1xuICAgIH1cbiAgICByZW5kZXJBZGRSZXN0YXVyYW50Rm9ybShyZXN0YXVyYW50TGlzdCkge1xuICAgICAgICBjb25zdCAkbW9kYWxDb250YWluZXIgPSB0aGlzLiR0YXJnZXQucXVlcnlTZWxlY3RvcihcIi5tb2RhbC1jb250YWluZXJcIik7XG4gICAgICAgIGNvbnN0IGZvcm1Nb2RhbCA9IG5ldyBBZGRSZXN0YXVyYW50Rm9ybU1vZGFsKCRtb2RhbENvbnRhaW5lcik7XG4gICAgICAgIGZvcm1Nb2RhbC5zZXRFdmVudChyZXN0YXVyYW50TGlzdCk7XG4gICAgfVxuICAgIHJlbmRlclJlc3RhdXJhbnREZXRhaWwocmVzdGF1cmFudEluZm8sIHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIGNvbnN0ICRtb2RhbENvbnRhaW5lciA9IHRoaXMuJHRhcmdldC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWNvbnRhaW5lclwiKTtcbiAgICAgICAgY29uc3QgZGV0YWlsTW9kYWwgPSBuZXcgUmVzdGF1cmFudERldGFpbE1vZGFsKCRtb2RhbENvbnRhaW5lciwgcmVzdGF1cmFudEluZm8pO1xuICAgICAgICBkZXRhaWxNb2RhbC5zZXRFdmVudChyZXN0YXVyYW50TGlzdCk7XG4gICAgfVxuICAgIHNldE9uQ2xpY2tCYWNrRHJvcEV2ZW50KCkge1xuICAgICAgICB0aGlzLiR0YXJnZXQucXVlcnlTZWxlY3RvcihcIi5tb2RhbC1iYWNrZHJvcFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy50b2dnbGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIHNldEV2ZW50KCkge1xuICAgICAgICB0aGlzLnNldE9uQ2xpY2tCYWNrRHJvcEV2ZW50KCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgTW9kYWw7XG4iLCJpbXBvcnQgdHJhbnNsYXRlQ2F0ZWdvcnkgZnJvbSBcIi4uLy4uLy4uL3V0aWwvdHJhbnNsYXRlQ2F0ZWdvcnlcIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5jbGFzcyBSZXN0YXVyYW50RGV0YWlsTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKCR0YXJnZXQsIHJlc3RhdXJhbnRJbmZvKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldCA9ICR0YXJnZXQ7XG4gICAgICAgIHRoaXMucmVzdGF1cmFudEluZm8gPSByZXN0YXVyYW50SW5mbztcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgPGRpdiBjbGFzcz1cInJlc3RhdXJhbnQtZGV0YWlsLWNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhdGVnb3J5LWFuZC1mYXZvcml0ZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdGF1cmFudF9fY2F0ZWdvcnlcIj5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBzcmM9XCIuL2NhdGVnb3J5LSR7dHJhbnNsYXRlQ2F0ZWdvcnkodGhpcy5yZXN0YXVyYW50SW5mby5jYXRlZ29yeSl9LnBuZ1wiXG4gICAgICAgICAgICBhbHQ9XCIke3RoaXMucmVzdGF1cmFudEluZm8uY2F0ZWdvcnl9XCJcbiAgICAgICAgICAgIGNsYXNzPVwiY2F0ZWdvcnktaWNvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWwtZmF2b3JpdGVcIj5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBzcmM9XCIuL2Zhdm9yaXRlLWljb24tJHt0aGlzLnJlc3RhdXJhbnRJbmZvLmZhdm9yaXRlID8gXCJmaWxsZWRcIiA6IFwibGluZWRcIn0ucG5nXCJcbiAgICAgICAgICAgIGFsdD1cIuymkOqyqOywvuq4sFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxoMyBjbGFzcz1cInJlc3RhdXJhbnRfX25hbWUgdGV4dC1zdWJ0aXRsZSBkZXRhaWwtc3VidGl0bGVcIj4ke3RoaXMucmVzdGF1cmFudEluZm8ubmFtZX08L2gzPlxuICAgICAgPHNwYW4gY2xhc3M9XCJyZXN0YXVyYW50X19kaXN0YW5jZSB0ZXh0LWJvZHlcIlxuICAgICAgICA+7Lqg7Y287Iqk67aA7YSwICR7dGhpcy5yZXN0YXVyYW50SW5mby5kaXN0YW5jZX3rtoQg64K0PC9zcGFuXG4gICAgICA+XG4gICAgICA8cCBjbGFzcz1cInJlc3RhdXJhbnRfX2Rlc2NyaXB0aW9uIHRleHQtYm9keVwiPlxuICAgICAgICAke3RoaXMucmVzdGF1cmFudEluZm8uZGVzY3JpcHRpb259XG4gICAgICA8L3A+XG4gICAgICA8YSBocmVmPVwiJHt0aGlzLnJlc3RhdXJhbnRJbmZvLmxpbmt9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHt0aGlzLnJlc3RhdXJhbnRJbmZvLmxpbmt9PC9hPlxuICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1jb250YWluZXJcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGlkPVwiZGV0YWlsLXJlbW92ZS1idXR0b25cIlxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi0tcHJpbWFyeSB0ZXh0LWNhcHRpb25cIlxuICAgICAgICA+XG4gICAgICAgICAg7IKt7KCc7ZWY6riwXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGlkPVwiZGV0YWlsLWNhbmNlbC1idXR0b25cIiBjbGFzcz1cImJ1dHRvbiBidXR0b24tLXNlY29uZGFyeSB0ZXh0LWNhcHRpb25cIj5cbiAgICAgICAgICDri6vquLBcbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBgO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5pbm5lckhUTUwgPSB0aGlzLnRlbXBsYXRlKCk7XG4gICAgfVxuICAgIHRvZ2dsZU1vZGFsKCkge1xuICAgICAgICB0aGlzLiR0YXJnZXQuY2xvc2VzdChcIi5tb2RhbFwiKS5jbGFzc0xpc3QudG9nZ2xlKFwibW9kYWwtLW9wZW5cIik7XG4gICAgfVxuICAgIHNldE9uQ2xpY2tGYXZvcml0ZUV2ZW50KHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5xdWVyeVNlbGVjdG9yKFwiLmRldGFpbC1mYXZvcml0ZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICByZXN0YXVyYW50TGlzdC5jaGFuZ2VGYXZvcml0ZVN0YXRlKHRoaXMucmVzdGF1cmFudEluZm8uaWQpO1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnNyYyA9IGAuL2Zhdm9yaXRlLWljb24tJHshdGhpcy5yZXN0YXVyYW50SW5mby5mYXZvcml0ZSA/IFwiZmlsbGVkXCIgOiBcImxpbmVkXCJ9LnBuZ2A7XG4gICAgICAgICAgICB0aGlzLnJlc3RhdXJhbnRJbmZvLmZhdm9yaXRlID0gIXRoaXMucmVzdGF1cmFudEluZm8uZmF2b3JpdGU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRPbkNsaWNrUmVtb3ZlRXZlbnQocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIjZGV0YWlsLXJlbW92ZS1idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIHJlc3RhdXJhbnRMaXN0LnJlbW92ZVJlc3RhdXJhbnQodGhpcy5yZXN0YXVyYW50SW5mby5pZCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZU1vZGFsKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRPbkNsaWNrQ2xvc2VFdmVudCgpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIjZGV0YWlsLWNhbmNlbC1idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMudG9nZ2xlTW9kYWwuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIHNldEV2ZW50KHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIHRoaXMuc2V0T25DbGlja0Zhdm9yaXRlRXZlbnQocmVzdGF1cmFudExpc3QpO1xuICAgICAgICB0aGlzLnNldE9uQ2xpY2tSZW1vdmVFdmVudChyZXN0YXVyYW50TGlzdCk7XG4gICAgICAgIHRoaXMuc2V0T25DbGlja0Nsb3NlRXZlbnQoKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBSZXN0YXVyYW50RGV0YWlsTW9kYWw7XG4iLCJpbXBvcnQgeyAkIH0gZnJvbSBcIi4uLy4uL3V0aWwvZG9tXCI7XG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuY2xhc3MgVGFiIHtcbiAgICBjb25zdHJ1Y3RvcigkdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuJHRhcmdldCA9ICR0YXJnZXQ7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInRhYlwiIGlkPVwiYWxsXCIgdmFsdWU9XCJhbGxcIiBjaGVja2VkIC8+ICBcbiAgICAgICAgPGxhYmVsIGZvcj1cImFsbFwiIGNsYXNzPSd0YWItaXRlbSBhbGwtdGFiJz5cbiAgICAgICAgICDrqqjrk6Ag7J2M7Iud7KCQXG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIFxuICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInRhYlwiIGlkPVwiZmF2b3JpdGVcIiB2YWx1ZT1cImZhdm9yaXRlXCIgLz5cbiAgICAgICAgPGxhYmVsIGZvcj1cImZhdm9yaXRlXCIgY2xhc3M9J3RhYi1pdGVtIGZhdm9yaXRlLXRhYic+XG4gICAgICAgICAg7J6Q7KO8IOqwgOuKlCDsnYzsi53soJBcbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgYDtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLiR0YXJnZXQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIHRoaXMudGVtcGxhdGUoKSk7XG4gICAgfVxuICAgIG9uQ2hhbmdlQWxsVGFiKHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIGNvbnN0ICRmaWx0ZXIgPSAkKFwiLnJlc3RhdXJhbnQtZmlsdGVyLWNvbnRhaW5lclwiKTtcbiAgICAgICAgJGZpbHRlci5jbGFzc0xpc3QuYWRkKFwiZmlsdGVyLS12aXNpYmxlXCIpO1xuICAgICAgICBjb25zdCBzZWxlY3RlZENhdGVnb3J5ID0gJGZpbHRlci5xdWVyeVNlbGVjdG9yKFwiI2NhdGVnb3J5LWZpbHRlclwiKS52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRTb3J0aW5nV2F5ID0gJGZpbHRlci5xdWVyeVNlbGVjdG9yKFwiI2NhdGVnb3J5LWZpbHRlclwiKS52YWx1ZTtcbiAgICAgICAgcmVzdGF1cmFudExpc3QucmVuZGVyRmlsdGVyZWRMaXN0KHNlbGVjdGVkQ2F0ZWdvcnksIHNlbGVjdGVkU29ydGluZ1dheSk7XG4gICAgfVxuICAgIG9uQ2hhbmdlRmF2b3JpdGVUYWIocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgY29uc3QgJGZpbHRlciA9ICQoXCIucmVzdGF1cmFudC1maWx0ZXItY29udGFpbmVyXCIpO1xuICAgICAgICAkZmlsdGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJmaWx0ZXItLXZpc2libGVcIik7XG4gICAgICAgIHJlc3RhdXJhbnRMaXN0LnJlbmRlckZhdm9yaXRlTGlzdCgpO1xuICAgIH1cbiAgICBzZXRPbkNoYW5nZVRhYkV2ZW50KHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUYWIgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRUYWIgPT09IFwiYWxsXCIpXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZUFsbFRhYihyZXN0YXVyYW50TGlzdCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRUYWIgPT09IFwiZmF2b3JpdGVcIilcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlRmF2b3JpdGVUYWIocmVzdGF1cmFudExpc3QpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0RXZlbnQocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgdGhpcy5zZXRPbkNoYW5nZVRhYkV2ZW50KHJlc3RhdXJhbnRMaXN0KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBUYWI7XG4iLCJpbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuaW1wb3J0IHsgQ0FURUdPUlksIFNPUlQgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzXCI7XG5jbGFzcyBGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCR0YXJnZXQpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0ID0gJHRhcmdldDtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgIDxzZWxlY3QgbmFtZT1cImNhdGVnb3J5XCIgaWQ9XCJjYXRlZ29yeS1maWx0ZXJcIiBjbGFzcz1cInJlc3RhdXJhbnQtZmlsdGVyXCI+XG4gICAgICAgICAgJHtPYmplY3QudmFsdWVzKENBVEVHT1JZKS5tYXAoKGNhdGVnb3J5VmFsdWUpID0+IGA8b3B0aW9uIHZhbHVlPSR7Y2F0ZWdvcnlWYWx1ZX0+JHtjYXRlZ29yeVZhbHVlfTwvb3B0aW9uPmApfVxuICAgICAgICA8L3NlbGVjdD5cblxuICAgICAgICA8c2VsZWN0IG5hbWU9XCJzb3J0aW5nXCIgaWQ9XCJzb3J0aW5nLWZpbHRlclwiIGNsYXNzPVwicmVzdGF1cmFudC1maWx0ZXJcIj5cbiAgICAgICAgICAke09iamVjdC52YWx1ZXMoU09SVCkubWFwKChzb3J0VmFsdWUpID0+IGA8b3B0aW9uIHZhbHVlPVwiJHtzb3J0VmFsdWV9XCJ9PiR7c29ydFZhbHVlfTwvb3B0aW9uPmApfVxuICAgICAgICA8L3NlbGVjdD5cbiAgICBgO1xuICAgIH1cbiAgICB0b2dnbGUoKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKFwiZmlsdGVyLS12aXNpYmxlXCIpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgdGhpcy50ZW1wbGF0ZSgpKTtcbiAgICB9XG4gICAgc2V0T25DaGFuZ2VDYXRlZ29yeUV2ZW50KHJlc3RhdXJhbnRMaXN0KSB7XG4gICAgICAgIHRoaXMuJHRhcmdldC5xdWVyeVNlbGVjdG9yKFwiI3NvcnRpbmctZmlsdGVyXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFNvcnRpbmdXYXkgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZENhdGVnb3J5ID0gdGhpcy4kdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIjY2F0ZWdvcnktZmlsdGVyXCIpLnZhbHVlO1xuICAgICAgICAgICAgcmVzdGF1cmFudExpc3QucmVuZGVyRmlsdGVyZWRMaXN0KHNlbGVjdGVkQ2F0ZWdvcnksIHNlbGVjdGVkU29ydGluZ1dheSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRPbkNoYW5nZVNvcnRFdmVudChyZXN0YXVyYW50TGlzdCkge1xuICAgICAgICB0aGlzLiR0YXJnZXQucXVlcnlTZWxlY3RvcihcIiNjYXRlZ29yeS1maWx0ZXJcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2F0ZWdvcnkgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFNvcnRpbmdXYXkgPSB0aGlzLiR0YXJnZXQucXVlcnlTZWxlY3RvcihcIiNzb3J0aW5nLWZpbHRlclwiKS52YWx1ZTtcbiAgICAgICAgICAgIHJlc3RhdXJhbnRMaXN0LnJlbmRlckZpbHRlcmVkTGlzdChzZWxlY3RlZENhdGVnb3J5LCBzZWxlY3RlZFNvcnRpbmdXYXkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0RXZlbnQocmVzdGF1cmFudExpc3QpIHtcbiAgICAgICAgdGhpcy5zZXRPbkNoYW5nZUNhdGVnb3J5RXZlbnQocmVzdGF1cmFudExpc3QpO1xuICAgICAgICB0aGlzLnNldE9uQ2hhbmdlU29ydEV2ZW50KHJlc3RhdXJhbnRMaXN0KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBGaWx0ZXI7XG4iLCJpbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuaW1wb3J0IFJlc3RhdXJhbnRMaXN0TWFuYWdlciBmcm9tIFwiLi4vLi4vZG9tYWluL1Jlc3RhdXJhbnRMaXN0TWFuYWdlclwiO1xuaW1wb3J0IHsgJCB9IGZyb20gXCIuLi8uLi91dGlsL2RvbVwiO1xuaW1wb3J0IExvY2FsU3RvcmFnZSBmcm9tIFwiLi4vLi4vdXRpbC9Mb2NhbFN0b3JhZ2VcIjtcbmltcG9ydCBSZXN0YXVyYW50SXRlbSBmcm9tIFwiLi9SZXN0YXVyYW50SXRlbVwiO1xuY2xhc3MgUmVzdGF1cmFudExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKCR0YXJnZXQsIG1vZGFsKSB7XG4gICAgICAgIHRoaXMuJHRhcmdldCA9ICR0YXJnZXQ7XG4gICAgICAgIHRoaXMubW9kYWwgPSBtb2RhbDtcbiAgICAgICAgY29uc3QgbG9jYWxEYXRhID0gTG9jYWxTdG9yYWdlLmdldERhdGEoXCJsaXN0XCIpO1xuICAgICAgICB0aGlzLnJlc3RhdXJhbnRMaXN0TWFuYWdlciA9IG5ldyBSZXN0YXVyYW50TGlzdE1hbmFnZXIobG9jYWxEYXRhKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJBbGxMaXN0KCk7XG4gICAgfVxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgPHVsIGNsYXNzPVwicmVzdGF1cmFudC1saXN0XCI+XG4gICAgICA8L3VsPlxuICAgIGA7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy4kdGFyZ2V0LmlubmVySFRNTCA9IHRoaXMudGVtcGxhdGUoKTtcbiAgICB9XG4gICAgcmVuZGVyTGlzdChyZXN0YXVyYW50cykge1xuICAgICAgICBjb25zdCAkcmVzdGF1cmFudExpc3QgPSB0aGlzLiR0YXJnZXQucXVlcnlTZWxlY3RvcihcIi5yZXN0YXVyYW50LWxpc3RcIik7XG4gICAgICAgICRyZXN0YXVyYW50TGlzdC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICByZXN0YXVyYW50cy5mb3JFYWNoKChyZXN0YXVyYW50SW5mbykgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBSZXN0YXVyYW50SXRlbSgkcmVzdGF1cmFudExpc3QsIHJlc3RhdXJhbnRJbmZvLCB0aGlzKTtcbiAgICAgICAgICAgIGl0ZW0uc2V0RXZlbnQodGhpcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW5kZXJBbGxMaXN0KCkge1xuICAgICAgICBjb25zdCBhbGxMaXN0ID0gdGhpcy5yZXN0YXVyYW50TGlzdE1hbmFnZXIuZ2V0UmVzdGF1cmFudExpc3QoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJMaXN0KGFsbExpc3QpO1xuICAgIH1cbiAgICByZW5kZXJGaWx0ZXJlZExpc3QoY2F0ZWdvcnksIHNvcnRpbmdXYXkpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRMaXN0ID0gdGhpcy5yZXN0YXVyYW50TGlzdE1hbmFnZXIuZ2V0UmVzdGF1cmFudExpc3QoY2F0ZWdvcnksIHNvcnRpbmdXYXkpO1xuICAgICAgICB0aGlzLnJlbmRlckxpc3QoZmlsdGVyZWRMaXN0KTtcbiAgICB9XG4gICAgcmVuZGVyRmF2b3JpdGVMaXN0KCkge1xuICAgICAgICBjb25zdCBmYXZvcml0ZUxpc3QgPSB0aGlzLnJlc3RhdXJhbnRMaXN0TWFuYWdlci5nZXRGYXZvcml0ZUxpc3QoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJMaXN0KGZhdm9yaXRlTGlzdCk7XG4gICAgfVxuICAgIHJlbmRlckxpc3RBZnRlckRhdGFDaGFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkVGFiID0gJCgnaW5wdXRbbmFtZT1cInRhYlwiXTpjaGVja2VkJykudmFsdWU7XG4gICAgICAgIGlmIChzZWxlY3RlZFRhYiA9PT0gXCJmYXZvcml0ZVwiKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckZhdm9yaXRlTGlzdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RlZFRhYiA9PT0gXCJhbGxcIikge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRDYXRlZ29yeSA9ICQoXCIjY2F0ZWdvcnktZmlsdGVyXCIpLnZhbHVlO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRTb3J0aW5nV2F5ID0gJChcIiNzb3J0aW5nLWZpbHRlclwiKS52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRmlsdGVyZWRMaXN0KHNlbGVjdGVkQ2F0ZWdvcnksIHNlbGVjdGVkU29ydGluZ1dheSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hhbmdlRmF2b3JpdGVTdGF0ZShyZXN0YXVyYW50SWQpIHtcbiAgICAgICAgdGhpcy5yZXN0YXVyYW50TGlzdE1hbmFnZXIudG9nZ2xlRmF2b3JpdGVTdGF0ZShOdW1iZXIocmVzdGF1cmFudElkKSk7XG4gICAgICAgIExvY2FsU3RvcmFnZS5zZXREYXRhKFwibGlzdFwiLCB0aGlzLnJlc3RhdXJhbnRMaXN0TWFuYWdlci5nZXRSZXN0YXVyYW50TGlzdCgpKTtcbiAgICAgICAgdGhpcy5yZW5kZXJMaXN0QWZ0ZXJEYXRhQ2hhbmdlKCk7XG4gICAgfVxuICAgIGFkZFJlc3RhdXJhbnQobmV3UmVzdGF1cmFudCkge1xuICAgICAgICB0aGlzLnJlc3RhdXJhbnRMaXN0TWFuYWdlci5hZGRSZXN0YXVyYW50KHsgLi4ubmV3UmVzdGF1cmFudCwgaWQ6IERhdGUubm93KCksIGZhdm9yaXRlOiBmYWxzZSB9KTtcbiAgICAgICAgTG9jYWxTdG9yYWdlLnNldERhdGEoXCJsaXN0XCIsIHRoaXMucmVzdGF1cmFudExpc3RNYW5hZ2VyLmdldFJlc3RhdXJhbnRMaXN0KCkpO1xuICAgICAgICB0aGlzLnJlbmRlckxpc3RBZnRlckRhdGFDaGFuZ2UoKTtcbiAgICB9XG4gICAgcmVtb3ZlUmVzdGF1cmFudChyZXN0YXVyYW50SWQpIHtcbiAgICAgICAgdGhpcy5yZXN0YXVyYW50TGlzdE1hbmFnZXIucmVtb3ZlUmVzdGF1cmFudChyZXN0YXVyYW50SWQpO1xuICAgICAgICBMb2NhbFN0b3JhZ2Uuc2V0RGF0YShcImxpc3RcIiwgdGhpcy5yZXN0YXVyYW50TGlzdE1hbmFnZXIuZ2V0UmVzdGF1cmFudExpc3QoKSk7XG4gICAgICAgIHRoaXMucmVuZGVyTGlzdEFmdGVyRGF0YUNoYW5nZSgpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFJlc3RhdXJhbnRMaXN0O1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwibmMiLCJDQVRFR09SWSIsIkFMTCIsIktPUkVBTiIsIkpBUEFORVNFIiwiQ0hJTkVTRSIsIkFTSUFOIiwiV0VTVEVSTiIsIkVUQyIsIlNPUlQiLCJOQU1FIiwiRElTVEFOQ0UiLCIkIiwic2VsZWN0b3IiLCJjYXRlZ29yeSIsIl9SZXN0YXVyYW50TGlzdE1hbmFnZXJfaW5zdGFuY2VzIiwiX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9yZXN0YXVyYW50TGlzdCIsIl9SZXN0YXVyYW50TGlzdE1hbmFnZXJfY2F0ZWdvcml6ZVJlc3RhdXJhbnRzIiwiX1Jlc3RhdXJhbnRMaXN0TWFuYWdlcl9zb3J0UmVzdGF1cmFudHMiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwicmVjZWl2ZXIiLCJzdGF0ZSIsInZhbHVlIiwia2luZCIsImYiLCJUeXBlRXJyb3IiLCJoYXMiLCJzZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiUmVzdGF1cmFudExpc3RNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJyZXN0YXVyYW50cyIsImFkZCIsImFkZFJlc3RhdXJhbnQiLCJpbmZvIiwicmVtb3ZlUmVzdGF1cmFudCIsImZpbHRlciIsInJlc3RhdXJhbnQiLCJnZXRSZXN0YXVyYW50TGlzdCIsInNvcnRpbmdXYXkiLCJjYXRlZ29yaXplZExpc3QiLCJnZXRGYXZvcml0ZUxpc3QiLCJmYXZvcml0ZSIsInRvZ2dsZUZhdm9yaXRlU3RhdGUiLCJXZWFrTWFwIiwiV2Vha1NldCIsInNvcnQiLCJiIiwibmFtZSIsImRpc3RhbmNlIiwic2V0RGF0YSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXREYXRhIiwiZ2V0SXRlbSIsInBhcnNlIiwibW9kYWwiLCIkdGFyZ2V0IiwicmVuZGVyIiwidGVtcGxhdGUiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ0b2dnbGUiLCJjbGFzc0xpc3QiLCJyZW5kZXJBZGRSZXN0YXVyYW50Rm9ybSIsInJlc3RhdXJhbnRMaXN0IiwiJG1vZGFsQ29udGFpbmVyIiwiaW5uZXJIVE1MIiwic2V0U3VibWl0RXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIm5ld1Jlc3RhdXJhbnQiLCJyZWR1Y2UiLCJyZXN0YXVyYW50SW5mbyIsImlucHV0Iiwibm9kZU5hbWUiLCJ0b2dnbGVNb2RhbCIsInNldE9uQ2xpY2tDYW5jZWxFdmVudCIsImJpbmQiLCJjbG9zZXN0Iiwic2V0RXZlbnQiLCJyZW5kZXJSZXN0YXVyYW50RGV0YWlsIiwiZGVzY3JpcHRpb24iLCJsaW5rIiwic2V0T25DbGlja0Zhdm9yaXRlRXZlbnQiLCJjaGFuZ2VGYXZvcml0ZVN0YXRlIiwic2V0T25DbGlja1JlbW92ZUV2ZW50Iiwic2V0T25DbGlja0Nsb3NlRXZlbnQiLCJzZXRPbkNsaWNrQmFja0Ryb3BFdmVudCIsImhlYWRlciIsInNldEFkZEJ1dHRvbkNsaWNrRXZlbnQiLCJ0YWIiLCJvbkNoYW5nZUFsbFRhYiIsIiRmaWx0ZXIiLCJzZWxlY3RlZENhdGVnb3J5Iiwic2VsZWN0ZWRTb3J0aW5nV2F5IiwicmVuZGVyRmlsdGVyZWRMaXN0Iiwib25DaGFuZ2VGYXZvcml0ZVRhYiIsInJlbmRlckZhdm9yaXRlTGlzdCIsInNldE9uQ2hhbmdlVGFiRXZlbnQiLCJzZWxlY3RlZFRhYiIsInZhbHVlcyIsImNhdGVnb3J5VmFsdWUiLCJzb3J0VmFsdWUiLCJzZXRPbkNoYW5nZUNhdGVnb3J5RXZlbnQiLCJzZXRPbkNoYW5nZVNvcnRFdmVudCIsImxvY2FsRGF0YSIsInJlc3RhdXJhbnRMaXN0TWFuYWdlciIsInJlbmRlckFsbExpc3QiLCJyZW5kZXJMaXN0IiwiJHJlc3RhdXJhbnRMaXN0IiwiZm9yRWFjaCIsInNldE9uQ2xpY2tJdGVtRXZlbnQiLCJhbGxMaXN0IiwiZmlsdGVyZWRMaXN0IiwiZmF2b3JpdGVMaXN0IiwicmVuZGVyTGlzdEFmdGVyRGF0YUNoYW5nZSIsInJlc3RhdXJhbnRJZCIsIk51bWJlciIsIkRhdGUiLCJub3ciXSwic291cmNlUm9vdCI6IiJ9